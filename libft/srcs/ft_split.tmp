#include <stdlib.h>
#include <unistd.h>
#include "libft.h"

//#include <stdio.h>
char	*concat(const	char *s1, char s2)
{
	size_t len1;
	size_t len2;
	char *result;
	char	*tmp;

	tmp = (char	*)malloc(sizeof(char));
	tmp[0] = s2;
	len1 = ft_strlen(s1);
	len2 = ft_strlen(tmp);
	result = (char	*)malloc(len1 + len2);
	ft_memcpy(result, s1, len1);
	ft_memcpy(result + len1, tmp, len2);
	free(tmp);
	return (result);
}

static	char	**create_massive(char	const	*s, char	c, size_t	const	total)
{
	size_t	i;
	int	count;
	char	*result;
	char	**split;

	i = 0;
	count = 0;
	result = "";
	split = (char	**)malloc(sizeof(char *) * ((int)(total) + 1));
	while(s[i])
	{
		if (s[i] != c && (s[i+1]))
			result = concat(result, s[i]);
		else
		{
			//if (result != "" || !(s[i+1]))
			if (ft_strcmp(result, "") != 0 || !(s[i+1]))
			{
				//if (result != "")
				if (ft_strcmp(result, "") != 0)
				{
					if (!(s[i+1]) && s[i] != c)
						result = concat(result, s[i]);
					split[count] = (char	*)malloc(sizeof(char) * (ft_strlen(result) + 1));
					//split[count] = concat(result, '\0');
					ft_strlcpy(split[count], result, ft_strlen(result) + 1);
					count++;
					result = "";
				}
			}
		}
		i++;
	}
	return (split);
}

int	new_total(char	const	*s, char	c)
{
	size_t	i;
	int	total;
	int	flag;

	i = 0;
	total = 0;
	flag = 0;
	while (s[i] == c && s[i])
		i++;
	while (s[i])
	{
		if (s[i] != c && flag == 0)
		{
			total++;
			flag = 1;
		}
		else if (s[i] == c)
			flag = 0;
		i++;
	}
	//printf("%d\n", total);
	return (total);
}

static	char	**ft_alloc_split(char const *s, char c)
{
	char	**split;
	int	new_totals;

	new_totals = new_total(s, c);
	split = create_massive(s, c, new_totals);
	if (!split)
		return (NULL);
	return (split);
}

char	**ft_split(char const *s, char c)
{
	char	**split;

	if (!s)
		return (NULL);
	split = ft_alloc_split(s, c);
	if (!(split))
		return (NULL);
	return (split);
}

/*int				main(void)
{
 	char	**tab;
 	unsigned int	i;
 
 	i = 0;
 	tab = ft_split("split  ||this|for|me|||||!|", '|');
 	if (!tab[0])
		printf("ok");
 	while (tab[i] != NULL)
 	{
		printf("'%s'\n", tab[i]);
		//ft_putendl_fd(tab[i], 1);
		i++;
 	}
	printf("'%s'\n", tab[i+1]);
	free(tab);
 	i = 0;
 	tab = ft_split("      split       this for   me  !       ", ' ');
 	if (!tab[0])
		printf("ok\n");
 	while (tab[i] != NULL)
 	{
		printf("'%s'\n", tab[i]);
		//ft_putendl_fd(tab[i], 1);
		i++;
 	}
	printf("'%s'\n", tab[i+1]);
	free(tab);
 	i = 0;
 	tab = ft_split("                  olol", ' ');
 	if (!tab[0])
		printf("ok\n");
 	while (tab[i] != NULL)
 	{
		printf("'%s'\n", tab[i]);
		//ft_putendl_fd(tab[i], 1);
		i++;
 	}
	printf("'%s'\n", tab[i+1]);
	free(tab);
	i = 0;
 	tab = ft_split("", '\65');
 	if (!tab[0])
		printf("ok\n");
 	while (tab[i] != NULL)
 	{
		printf("'%s'\n", tab[i]);
		//ft_putendl_fd(tab[i], 1);
		i++;
 	}
	printf("'%s'\n", tab[i]);
	printf("'%s'\n", tab[i+1]);
	free(tab);
	return (0);
}*/
